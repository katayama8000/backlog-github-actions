name: Advanced Backlog Issue Examples

on:
  workflow_dispatch:
  issues:
    types: [opened, labeled]

jobs:
  # Example 1: Create issue with parent-child relationship
  create-epic-and-tasks:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Create Epic Issue
        id: epic
        uses: katayama8000/backlog-github-actions@0.1.0
        with:
          backlog_domain: 'tatsufumi.backlog.com'
          api_key: ${{ secrets.BACKLOG_API_KEY }}
          project_id: '665456'
          issue_type_id: '3529952'  # Epic issue type
          summary: 'Epic: User Authentication System'
          priority_id: '2'
          description: |
            ## Epic Overview
            Implement comprehensive user authentication system
            
            ### Components:
            - Login/Logout functionality
            - Password reset
            - Two-factor authentication
            - Session management
          start_date: '2025-09-01'
          due_date: '2025-12-31'
          estimated_hours: '120'
          milestone_ids: '5'

      - name: Create Sub-task 1
        uses: katayama8000/backlog-github-actions@0.1.0
        with:
          backlog_domain: 'tatsufumi.backlog.com'
          api_key: ${{ secrets.BACKLOG_API_KEY }}
          project_id: '665456'
          issue_type_id: '3529949'  # Task issue type
          summary: 'Task: Implement Login API'
          priority_id: '3'
          description: 'Create REST API endpoints for user login'
          parent_issue_id: ${{ steps.epic.outputs.issue_id }}
          assignee_id: '123456'
          estimated_hours: '16'
          category_ids: '1'  # Backend category

  # Example 2: Create issue based on GitHub issue labels
  sync-github-issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'backlog-sync')
    steps:
      - name: Create Backlog issue from GitHub issue
        uses: katayama8000/backlog-github-actions@0.1.0
        with:
          backlog_domain: 'tatsufumi.backlog.com'
          api_key: ${{ secrets.BACKLOG_API_KEY }}
          project_id: '665456'
          issue_type_id: '3529949'
          summary: '[GitHub] ${{ github.event.issue.title }}'
          priority_id: ${{ contains(github.event.issue.labels.*.name, 'high-priority') && '2' || '3' }}
          description: |
            **Original GitHub Issue:** ${{ github.event.issue.html_url }}
            **Author:** @${{ github.event.issue.user.login }}
            **Created:** ${{ github.event.issue.created_at }}
            
            ---
            
            ${{ github.event.issue.body }}
          assignee_id: '123456'  # Default assignee

  # Example 3: Scheduled maintenance task creation
  create-maintenance-tasks:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Create Monthly Security Review Task
        uses: katayama8000/backlog-github-actions@0.1.0
        with:
          backlog_domain: 'tatsufumi.backlog.com'
          api_key: ${{ secrets.BACKLOG_API_KEY }}
          project_id: '665456'
          issue_type_id: '3529953'  # Maintenance issue type
          summary: 'Monthly Security Review - ${{ github.run_number }}'
          priority_id: '2'
          description: |
            ## Monthly Security Review Checklist
            
            ### Code Review
            - [ ] Review recent commits for security vulnerabilities
            - [ ] Check dependency updates
            - [ ] Verify access controls
            
            ### Infrastructure Review
            - [ ] Review server configurations
            - [ ] Check SSL certificates expiration
            - [ ] Verify backup systems
            
            ### Documentation
            - [ ] Update security policies
            - [ ] Review incident response procedures
          start_date: ${{ steps.dates.outputs.first_day }}
          due_date: ${{ steps.dates.outputs.last_day }}
          estimated_hours: '8'
          category_ids: '2,3'  # Security, Maintenance categories
          notified_user_ids: '123456,789012'  # Security team

      - name: Calculate dates
        id: dates
        run: |
          first_day=$(date -d "$(date +'%Y-%m-01')" +'%Y-%m-%d')
          last_day=$(date -d "$(date +'%Y-%m-01') +1 month -1 day" +'%Y-%m-%d')
          echo "first_day=$first_day" >> $GITHUB_OUTPUT
          echo "last_day=$last_day" >> $GITHUB_OUTPUT
